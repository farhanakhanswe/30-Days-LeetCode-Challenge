## Array Copying with Spread Syntax ##
--------------------------------------------------------------

(1) The spread syntax [...arr] is a powerful feature introduced in ECMAScript 6 (ES6) 
    that simplifies working with arrays in JavaScript.
(2) It allows you to create a shallow copy of an array effortlessly. 

(3) Here are some short notes with examples:

    (a) Creating a Shallow Copy:
     -------------------------------------------------------------------------------------------------------------------------

    # The spread syntax [...arr] is used to create a new array containing the same elements as the original array arr. 
    # It effectively clones the array without modifying the original.

    const originalArray = [1, 2, 3];
    const copiedArray = [...originalArray];

    console.log(copiedArray); // [1, 2, 3]

    (b) Merging Arrays:
     -------------------------------------------------------------------------------------------------------------------------

    # Spread syntax is handy for merging multiple arrays into a single array.

    const array1 = [1, 2];
    const array2 = [3, 4];
    const mergedArray = [...array1, ...array2];

    console.log(mergedArray); // [1, 2, 3, 4]

    (c) Copying Arrays with Additional Elements:
    -------------------------------------------------------------------------------------------------------------------------

    # You can create a copy of an array while adding or modifying elements.

    const originalArray = [1, 2, 3];
    const newArray = [...originalArray, 4, 5];

    console.log(newArray); // [1, 2, 3, 4, 5]

    (d) Copying Nested Arrays:
    -------------------------------------------------------------------------------------------------------------------------
    
    # Spread syntax works for copying nested arrays too, but it creates a shallow copy. 
    # Nested arrays still reference the same objects in memory.

    const originalArray = [[1], [2]];
    const copiedArray = [...originalArray];

    copiedArray[0][0] = 0;

    console.log(originalArray); // [[0], [2]]

    (e) Copying Object Properties:
    -------------------------------------------------------------------------------------------------------------------------

    # While primarily used for arrays, spread syntax can also copy properties from one object to another.

    const originalObject = { a: 1, b: 2 };
    const copiedObject = { ...originalObject, c: 3 };

    console.log(copiedObject); // { a: 1, b: 2, c: 3 }

(4) Note : Remember that spread syntax creates shallow copies, so if you have nested objects or arrays,     
    they will still reference the same objects in memory. To create deep copies, you may need to use more advanced techniques or libraries.